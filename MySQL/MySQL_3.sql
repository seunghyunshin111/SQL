SHOW DATABASES;
USE SAKILA;
SHOW TABLES;
SELECT * FROM FILM;
SELECT COUNT(*) FROM FILM;
SELECT COUNT(*) FROM FILM WHERE RENTAL_DURATION = 7;
SELECT COUNT(*) FROM FILM WHERE RENTAL_DURATION <= 5;
SELECT COUNT(*) FROM FILM WHERE ORIGINAL_LANGUAGE_ID IS NULL;
SELECT COUNT(LANGUAGE_ID), COUNT(ORIGINAL_LANGUAGE_ID) FROM FILM; # NULL은 COUNT에서 제외


SELECT COUNT(RENTAL_DURATION) FROM FILM;


# RENTAL_DURATION의 CATEGORY의 갯수를 읽어보세요.
SELECT COUNT(DISTINCT RENTAL_DURATION) FROM FILM;


SELECT * FROM FILM;
SELECT SUM(RENTAL_RATE) FROM FILM;
SELECT SUM(DISTINCT RENTAL_RATE) FROM FILM;


# RENTAL_DURATION이 6 이상인 영화의 REPLACEMENT_COST의 SUM을 읽어보자.
SELECT SUM(REPLACEMENT_COST) FROM FILM WHERE RENTAL_DURATION >= 6;

SELECT AVG(REPLACEMENT_COST) FROM FILM;


# TITLE이나 DESCRIPTON 안에 LOVE가 들어가 있는 영화의 REPLACEMENT_COST의 평균을 계산해보세요.
SELECT * FROM FILM WHERE TITLE LIKE '%LOVE%';
SELECT AVG(REPLACEMENT_COST) FROM FILM WHERE TITLE LIKE '%LOVE%';


# NULL을 0으로 처리해서 평균을 계산하고 싶다면?
SELECT COUNT(*) FROM FILM WHERE ORIGINAL_LANGUAGE_ID IS NULL;
SELECT AVG(CASE WHEN RENTAL_DURATION IS NULL THEN 0 ELSE RENTAL_DURATION END) FROM FILM;
SELECT AVG(CASE WHEN ORIGINAL_LANGUAGE_ID IS NULL THEN 0 ELSE ORIGINAL_LANGUAGE_ID END) FROM FILM;


# GROUP BY
SELECT * FROM FILM GROUP BY RENTAL_DURATION;


# 집계내고 싶어서 쓰는 GROUP BY
SELECT RENTAL_DURATION, COUNT(REPLACEMENT_COST) FROM FILM GROUP BY RENTAL_DURATION;
SELECT RENTAL_DURATION, AVG(REPLACEMENT_COST) FROM FILM GROUP BY RENTAL_DURATION;
SELECT RENTAL_DURATION, COUNT(RENTAL_RATE), AVG(REPLACEMENT_COST) FROM FILM GROUP BY RENTAL_DURATION;


# HAVING절은 안 쓰는 게 좋아서 넘어감


# 처리 순서
# WHERE -> GROUP BY -> SELECT -> GROUP BY



## 2

# RENTAL_DURATION이 최솟값인 TABLE의 모든 열을 보여줘
SELECT MIN(RENTAL_DURATION) FROM FILM;


# SUBQUARY ( ()가 필요한 경우에 씀)
SELECT * FROM FILM
WHERE RENTAL_DURATION = (SELECT MIN(RENTAL_DURATION) FROM FILM);

SELECT (SELECT COUNT(RENTAL_RATE) FROM FILM) AS COUNT_RATE,
		(SELECT COUNT(RENTAL_DURATION) FROM FILM) AS COUNT_DURATION;
        
        
# AS를 꼭 써주기 (아니면 값 안 나온다)
SELECT * FROM (SELECT TITLE FROM FILM) AS TITLE;

# 테이블 이름을 SUMMARY로 써서 TITLE, DESCRIPTION을 가져오겠다는 SUBQUARY
SELECT * FROM (SELECT TITLE, DESCRIPTION FROM FILM) AS SUMMARY;

# SUMMARY 안에 SMR SUBQUARY 추가
SELECT * FROM (SELECT * FROM (SELECT TITLE, DESCRIPTION FROM FILM) AS SUMMARY) SMR;


CREATE TABLE FILM_2 SELECT * FROM FILM;
SHOW TABLES;
SELECT * FROM FILM;
SELECT * FROM FILM_ACTOR;
INSERT INTO FILM_2 VALUES ((SELECT * FROM FILM_ACTOR));


# COUNT는 *이 되지만, 나머지 집계함수는 *을 쓸 수 없다. 원하는 컬럼을 지정해야 한다.
CREATE TABLE FILM_2 SELECT COUNT(*) FROM FILM;
INSERT INTO FILM_2 VALUES ((SELECT SUM(RENTAL_DURATION) FROM FILM));
SELECT * FROM FILM_2;


# 상관 서브쿼리
CREATE TABLE TEST_FILM SELECT TITLE, ORIGINAL_LANGUAGE_ID FROM FILM;
SELECT * FROM TEST_FILM WHERE TITLE LIKE '%LOVE%';

UPDATE TEST_FILM SET ORIGINAL_LANGUAGE_ID = 1 WHERE TITLE LIKE '%LOVE%';


# CITY
SELECT * FROM CITY;
# INDEX 조회
SHOW INDEX FROM CITY;
EXPLAIN SELECT * FROM CITY WHERE COUNTRY_ID > 100;
# DROP INDEX
-- DROP INDEX IDX_FK_COUNTRY_ID ON CITY;


# 인덱스 == 논리적 분류 (VS 물리적 분류)

SHOW TABLES;
SELECT * FROM ACTOR;
SELECT * FROM ACTOR_INFO;


# PANDAS MERGE == JOIN
# INNER OUTER(X) RIGHT LEFT
# OUTER: 하나만 있으면 가져오기, INNER: 모두 있으면 가져오기
SELECT ACTOR.FIRST_NAME, ACTOR_INFO.FILM_INFO
FROM ACTOR INNER JOIN ACTOR_INFO
ON ACTOR.ACTOR_ID = ACTOR_INFO.ACTOR_ID;






